import reo.sync;
import reo.binop;
import reo.fifo1;
import reo.transformer;
import reo.syncdrain;
import reo.filter;
import reo.fifofull;

chess3 = (){


//	fifo1(whiteO,blackC)
//	fifofull<"">(blackO,whiteC)
	fifofull<"">(x,whiteC)
	

	{
		Engine(whiteC,whiteR)	
		visualize(whiteC,whiteR,whiteM,blackC)	        

		Engine(blackC,blackR)
		visualize(blackC,blackR,blackM,whiteC)	        	

	|
	
		Engine=(a?,b!){
			#RBA {a,b} true
			Java:"Workers.Engine"
		}
	}
	
	{ 
	Display(whiteM,blackM)
	|
	  Display(a?,b?){
		#RBA {a,b} true
		Java:"Workers.Display"

	  }
	}
	
}

visualize(C?,R?,M!,O!){
	//
	// This function take :
	//	the input port of an engine (C?)
	//	the output port of an engine (R?)
	//	the port of the display (M)
	//
	// display the visualisation of engines playing.
	//

	fifo1(C,k)
      	{ transformer<PARSE>(R,M) | PARSE = "Function.parse"}
	{ binop<CONCATENATE>(k,M,O) | CONCATENATE = "Function.concatenate" }

}

