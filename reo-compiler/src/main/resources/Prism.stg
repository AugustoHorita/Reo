main(S) ::= <<
//
// Generated from <S.file> by Reo <S.version>.
//

mdp

const N;

<S.components:component(); separator="\n\n">
>>


component(c) ::= <<
<if(c.atomic)><c:atomic()><else><c:protocol()><endif>
>>

atomic(c) ::= <<
<c.code>
>>

protocol(c) ::= <<
module <c.name>
    <c:variables(); separator="\n">

    <c.transitions:command(); separator="\n">
endmodule
>>

variables(c) ::= <<
<c.initial.keys:{m | <m.name> : [0..N-1] init <if(c.initial.(m))>true<else>0<endif>;}; separator="\n">
>>

command(t) ::= <<
[] <t.guard:formula()> -> <t:update1()>;
>>

formula(f) ::= <<
<if(f.negation)>!(<f.formula:formula()>)<elseif(f.equality)><f:equality()><elseif(f.relation)><f:symbol()><elseif(f.conjunction)>(<f.clauses:formula(); separator=" & ">)<elseif(f.disjunction)>(<f.clauses:formula(); separator=" | ">)<endif>
>>

update(m) ::= <<
<m.keys:{p | (<p.name>' = <m.(p):term()>)}; separator=" & ">
>>

update1(m) ::= <<
<m.PRISMUpdate.keys:{u | <term(m.PRISMUpdate.(u))> : <update(u)>}; separator=" + ">
>>

equality(f) ::= <<
<if(f.LHS.isnonnull)><f.RHS:term()> != 0<elseif(f.RHS.isnonnull)><f.LHS:term()> != 0<else><f.LHS:term()> = <f.RHS:term()><endif>
>>

term(t) ::= <<
<if(t.isnull)>0<elseif(t.isnonnull)>1<elseif(t.function)><t:symbol()><elseif(t.node)><t.name><elseif(t.memory)><t.name><if(t.prime)>'<endif><endif>
>>

symbol(s) ::= <<
<if(s.infix)>(<s.args; separator=s.name>)<else><s.name><if(s.args)>(<s.args; separator=", ">)<endif><endif>
>>
