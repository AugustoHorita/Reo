main(S) ::= <<
//
// Generated from <S.file> by Reo <S.version>.
//

mdp

<S.components:component(); separator="\n\n">
>>


component(c) ::= <<
<if(c.atomic)><c:atomic()><else><c:protocol()><endif>
>>

atomic(c) ::= <<
<c.code>
>>

protocol(c) ::= <<
module <c.name> 
    <c.transitions:command(); separator="\n">
endmodule
>>

command(t) ::= <<
[<t.action>] (<t:formula()>) -> <t:update()>;
>>

update(t) ::= <<
<t.memory.keys:{p | <if(t.memory.(p).distribution)><t.memory.(p):distr()><else><p.name> = <t.memory.(p):term()><endif>}; separator=" & ">
>>

distr(d) ::= <<
<d.terms.keys:{x | <d.terms.(x)> : (<p.name>' = <term(x)>)}; separator=" + ">
>>

formula(f) ::= <<
<if(f.negation)>!(<f.formula:formula()>)<elseif(f.equality)><f.LHS:term()>=<f.RHS:term()><elseif(f.conjunction)>(<f.clauses:formula(); separator=" & ">)<elseif(f.disjunction)>(<f.clauses:formula(); separator=" | ">)<endif>
>>

term(t) ::= <<
<if(function)><t.value><if(t.args)><f.args:term(); separator="<t.name>"><endif><elseif(t.memory)><t.name><endif>
>>

