main(S) ::= <<
/**
 * Generated from <S.file> by Reo 1.0.
 */
package <S.package>;

import nl.cwi.reo.runtime.java.*;

public class <S.name> {

  public static void main(String[] args) {
    
    <S.ports:newPort(); separator="\n">
    
	<S.instances:newInstance(); separator="\n">
	
	<S.instances:newThread(); separator="\n">

	<S.instances:start(); separator="\n">
	
    try {
      <S.instances:join(); separator="\n">
    } catch (InterruptedException e) {
      e.printStackTrace();
    }	

    System.exit(0);

  }

  <S.definitions:definition(); separator="\n\n">
  
}
>>

newPort(p) ::= <<
Port\<<p.typeTag>\> <p.name> = new PortBusyWait\<<p.typeTag>\>();
>>

newInstance(I) ::= <<
Component <I.name> = new <I.definition>(<I.ports:{p|<p.name>}; separator=", ">);
>>

start(I) ::= <<
<I.name>.start();
>>

join(I) ::= <<
<if(!I.deamon)><I.name>.join();<endif>
>>

definition(A) ::= <<
<if(A.component)><A:component()>
<elseif(A.automaton)><A:automaton()>
<endif>
>>




<! Port fields !>




port(p) ::= <<
/**
 * <if(p.input)>Input<else>Output<endif> port <p.name> of this automaton.
 */
private volatile Port\<<p.typeTag>\> <p.name>;
>>




<! Atomic component class !>




component(A) ::= <<
/**
 * An active Reo component that runs code of an atomic component.
 */
private class <A.name> implements Component {

  <A.interface:port(); separator="\n\n">
			
  public <A.name>(<A.interface:{p | Port\<<p.typeTag>\> <p.name>}; separator=", ">) {
    <A.interface:{a | <a.name>.<if(a.input)>setConsumer(this);<else>setProducer(this);<endif>}; separator="\n">
    <A.interface:{a | this.<a.name> = <a.name>;}; separator="\n">
  }

  public synchronized void hit() {
    notify();
  }

  public void run() {
    <A.call>	
  }
}
>>




<! Active automaton class !>




automaton(A) ::= <<
/**
 * An active Reo component that is generated from an automaton.
 */
private class <A.name> implements Component {

  <A.interface:port(); separator="\n\n">
  
  <A.memory:memorycell(); separator="\n\n">
  
  /**
   * Current state of this automaton.
   */
  private int q = 0;
			
  public <A.name>(<A.interface:{p | Port\<<p.typeTag>\> <p.name>}; separator=", ">) {
    <A.interface:{a | <a.name>.<if(a.input)>setConsumer(this);<else>setProducer(this);<endif>}; separator="\n">
    <A.interface:{a | this.<a.name> = <a.name>;}; separator="\n">
  }

  public synchronized void hit() {
    notify();	
  }

  public void run() {
    <run(A)>	
  }
}
>>

memorycell(m) ::= <<
/**
 * Memory cell <m.name> of this automaton.
 */
private <m.type> <m.name>;
>>

run(A) ::= <<
int k = 0;
while (true) {
  k++;
  switch (q) {
  <A.transitions.keys:{k | <outs(k, A.transitions)>}; separator="\n">
  }
  if (k > 3) {
    k = 0;
    try { wait(); } catch (InterruptedException e) { }	
  }
}
>>

outs(q, out) ::= <<
case <q>:
  <out.(q):transition()>
>>

transition(t) ::= <<
if (<guard(t)>) {
  <action(t)>
  continue;
}
>>

action(t) ::= <<
<t.SyncConstraint:{p | <if(p.input)><p.typeTag> d_<p.name> = <p.name>.get();
<endif>}; separator=""><t.action.keys:{k | <k>.put(<t.action.(k)>);}; separator="\n">
q = <t.target>;
>>

doSync(p) ::= <<
<if(p.input)><p.name>.canGet()
<else><p.name>.canPut()
<endif>
>>

guard(t) ::= <<
<t.SyncConstraint:canSync(); separator=" && ">
>>

canSync(p) ::= <<
<p.name>.<if(p.input)>canGet()<else>canPut()<endif>
>>

