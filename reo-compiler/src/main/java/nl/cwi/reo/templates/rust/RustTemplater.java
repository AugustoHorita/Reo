package nl.cwi.reo.templates.rust;
import nl.cwi.reo.templates.*;


/*
entrypoint to the Rust language code generator
This generates a single source file's string with (potentially) multiple protocol objects
 */
public class RustTemplater {
    public static String generateCode(ReoTemplate template) {
        // 1. emit imports preamble
        StringBuilder sb = new StringBuilder();

        sb.append("// Generated by Reo 1.0\n");
        sb.append("\n");
        sb.append("#[allow(unused_imports)]\n");
        sb.append("use maplit::{hashmap, hashset};\n");
        sb.append("\n");
        sb.append("pub use reo_rs::*;\n");
        sb.append("use reo_rs::building::{*, NameDef::*};\n");
        sb.append("use reo_rs::{Instruction::*, Term::*};\n");
        sb.append("\n");

        // 2. emit protocol types and trait definitions
        for (Component c: template.getComponents()) {
            if (c instanceof Protocol) {
                ImperativeFormProto proto = new ImperativeFormProto((Protocol) c);
                // System.out.println("PROTO: " + proto.toString());
                proto.generateCode(sb);
                sb.append("\n");
            }
        }

        // 3. return completed code
        // System.out.println("COMPLETED: " + sb.toString());
        return sb.toString();
    }
}
