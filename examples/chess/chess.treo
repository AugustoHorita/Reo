import reo.binop;
import reo.fifo1;
import reo.transformer;
import reo.fifofull;

/*
* For this exercise, you can use some workers accessible by the class Workers.java
* You can link to a Java code source in an atomic file by :
*
* 	Name = (*interface*){ #PR
*
*		identity(*ports*;)
*	|
*		Java:"Workers.**** "
*	}
*/

chess = (){
	fifofull<"">(x,WhiteI)
	Engine1(WhiteI,WhiteO)
	Engine2(BlackI,BlackO)
	visualize(WhiteI,WhiteO,Display1,BlackI)
	visualize(BlackI,BlackO,Display2,WhiteI)
	Display(Display1,Display2)
}

Engine1(a?String,b!String){
	#RBA {a,b} true
	#Java "Workers.Engine"
}

Engine2(a?String,b!String){
	#RBA {a,b} true
	#Java "Workers.Engine"
}

Display(a?String,b?String){
	#RBA {a,b} true
	#Java "Workers.Display"
}

visualize(C?String,R?String,M!String,O!String){
	//
	// This function take :
	//	the input port of an engine (C?)
	//	the output port of an engine (R?)
	//	the port of the display (M!)
	//
	// display the visualisation of engines playing.
	//

	fifo1(C,k)
      	transformer<"Function.parse">(R,M)
	binop<"Function.concatenate">(k,M,O)

}

