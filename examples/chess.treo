import reo.sync;
import reo.binop;
import reo.fifo1;
import reo.transformer;
import reo.syncdrain;

chess = (whiteB[1..3]?,blackB?,whiteH[1..3]!,blackH!,whiteM!,blackM!){
	Team(a,whiteB[1..3],whiteH[1..3],whiteM,whiteO)
}

concatenator(a[1..N]?,b!){
	{ sync(a[1],b) | N=1}
	
	{ sync(a[1],P[1])
		{ binop<CONCATENATE>(a[i+1],P[i],P[i+1])
		|
		i:<1..(N-1)>,
		CONCATENATE = "nl.cwi.reo.templates.Functions.concatenate"
		}

	  sync(P[N],b)
	|
	  N>1}
}

Team(a?,best[1..K]?,hist[1..P]!,move!,out!){
	fifo1(a,b)

	{ sync(a,hist[i]) | i:<1..P> }

	{ transformer<PARSE>(best[i],P[i]) | i :<1..K>, PARSE = "nl.cwi.reo.templates.Functions.parse"}

	concatenator(P[1..K],c)
	{transformer<MAJORITY>(c,d) | MAJORITY = "nl.cwi.reo.templates.Functions.majority" }
	syncdrain(d,b)
	{ filter<MOVE>(d,e) | MOVE = "nl.cwi.reo.templates.Relations.move" }
	sync(e,move)
	{ binop<CONCATENATE>(b,e,out) | CONCATENATE = "nl.cwi.reo.templates.Functions.concatenate" }

}



