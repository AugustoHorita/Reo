group templates;

header(packageName) ::= <<
package <packageName>;

import java.util.*;
import java.util.concurrent.atomic.*;

import nl.cwi.pr.runtime.*;
import nl.cwi.pr.runtime.api.*;
>>

protocolClass(settings,protocolSimpleClassName,automata) ::= <<
public class <protocolSimpleClassName> {
	
	//
	// FIELDS
	//
	
<if(automata.sorted)>
	/*
	 * Automata
	 */
	
<automata.sorted:{aut|<!
!>	final <protocolSimpleClassName>_Automaton<aut.id> automaton<aut.id>;<!
!>};separator="\n">

<endif>
<if(automata.publicPorts.sorted)>
	/*
	 * Public ports
	 */
	
<automata.publicPorts.sorted:{p|<!
!>	final PublicPort <p.variableName>;<!
!>};separator="\n">
	
<endif>
<if(automata.privatePorts.sorted)>
	/*
	 * Private ports
	 */
	
<automata.privatePorts.sorted:{p|<!
!>	final PrivatePort <p.variableName>;<!
!>};separator="\n">

<endif>
<if(automata.memoryCells.sorted)>
	/*
	 * Memory cells
	 */
	
<automata.memoryCells.sorted:{m|<!
!>	final MemoryCell memoryCell<m.id> = new MemoryCell(<if(m.properties.HAS_TERM)><m.term.expression><endif>);<!
!>};separator="\n">
	
<endif>
<if(!settings.IGNORE_DATA)>
	/*
	 * Variable pool
	 */
	
	final CspVariablePool variablePool = new CspVariablePool();
	
<endif>
	//
	// CONSTRUCTORS
	//
	
	public <protocolSimpleClassName>(
<automata.publicInputPorts.sorted:{p|<!
!>		Port <p.variableName><!
!>};separator=",\n"><!
!><if(automata.publicInputPorts.sorted&&automata.publicOutputPorts.sorted)>,<\n><endif><!
!><automata.publicOutputPorts.sorted:{p|<!
!>		Port <p.variableName><!
!>};separator=",\n">
	) {
		
<if(automata.publicPorts.sorted)>
		/*
		 * Set public ports
		 */
		
<automata.publicPorts.sorted:{p|<!
!>		this.<p.variableName> = (PublicPort) <p.variableName>;<!
!>};separator="\n">
		
<endif>
<if(automata.privatePorts.sorted)>
		/*
		 * Set private ports
		 */
		
<automata.privatePorts.sorted:{p|<!
!>		this.<p.variableName> = new PrivatePort();<!
!>};separator="\n">
		
<endif>
<if(automata.sorted)>
		/*
		 * Set automata
		 */
		
<automata.sorted:{aut|<!
!>		this.automaton<aut.id> = new <protocolSimpleClassName>_Automaton<aut.id>();<!
!>};separator="\n">
		
<endif>
		/*
		 * Initialize
		 */
		
		initialize();
		
<if(settings.PARTITION)>
		/*
		 * Start
		 */
		
		start();
		
<endif>
		/*
		 * Return
		 */
		
		return;
	}
	
	//
	// METHODS
	//
	
	public void initialize() {
		
<automata.sorted:{aut|<!
!><if([aut.publicInputPorts.sorted,aut.publicOutputPorts.sorted]||(settings.PARTITION&&aut.properties.MASTER&&aut.privatePorts.sorted))>
		/*
		 * Initialize ports in automaton #<aut.id>
		 */
		
		{
<aut.publicInputPorts.sorted:{p|<!
!>			this.<p.variableName>.handler = new HandlerFor<p.variableName>(this);<!
!>};separator="\n">
<aut.publicOutputPorts.sorted:{p|<!
!>			this.<p.variableName>.handler = new HandlerFor<p.variableName>(this);<!
!>};separator="\n">
<if(settings.PARTITION&&aut.properties.MASTER&&aut.privatePorts.sorted)>
<aut.privatePorts.sorted:{p|<!
!>			this.<p.variableName>.masterHandler = new HandlerFor<p.variableName>(this);<!
!>};separator="\n">
<endif>
		\}<!
!><endif><!
!>};separator="\n\n">
		
		/*
		 * Initialize automata
		 */
		
<automata.sorted:{aut|<!
!>		this.automaton<aut.id>.initialize(this);<!
!>};separator="\n">
	}

<if(settings.PARTITION)>
	public void start() {
<automata.sorted:{aut|<!
!>		this.automaton<aut.id>.start();<!
!>};separator="\n">
	}
	
<endif>
	//
	// MAIN
	//
	
	public static void main(String[] args) {
<automata.publicInputPorts.sorted:{p|<!
!>		OutputPort <p.variableName> = Ports.newOutputPort();<!
!>};separator="\n">
<automata.publicOutputPorts.sorted:{p|<!
!>		InputPort <p.variableName> = Ports.newInputPort();<!
!>};separator="\n">
		
		new <protocolSimpleClassName>(
<[automata.publicInputPorts.sorted,automata.publicOutputPorts.sorted]:{p|<!
!>			<p.variableName><!
!>};separator=",\n">
		);
		
		Map\<String, Port> inputPorts = new HashMap\<>();
<automata.publicInputPorts.sorted:{p|<!
!>		inputPorts.put("<p.variableName>", (Port) <p.variableName>);<!
!>};separator="\n">

		Map\<String, Port> outputPorts = new HashMap\<>();
<automata.publicOutputPorts.sorted:{p|<!
!>		outputPorts.put("<p.variableName>", (Port) <p.variableName>);<!
!>};separator="\n">
		
		new Thread(new Console(inputPorts, outputPorts)).start();
	}
}
>>

automatonClass(settings,protocolSimpleClassName,automaton) ::= <<
class <protocolSimpleClassName>_Automaton<automaton.id> extends Automaton<if(settings.PARTITION&&automaton.properties.MASTER)>WithQhq<endif> {
	
	//
	// FIELDS
	//
	
<if(automaton.states.sorted)>
	/*
	 * States
	 */
	 
<automaton.states.sorted:{st|<!
!>	final <protocolSimpleClassName>_Automaton<automaton.id>_State<st.id> state<st.id>;<!
!>};separator="\n">

<endif>
<if(rest(automaton.states.sorted)||(settings.PARTITION&&automaton.properties.SLAVE))>
	/*
	 * Current state
	 */
	
	final Current current = new Current();
	
<endif>
<if(settings.COUNT_PORTS
	&&!rest(automaton.transitions.sorted))>
	/*
	 * Put/get counter
	 */
	
	final AtomicInteger counter = new AtomicInteger(0);
	
<endif>
<if(automaton.portsPerGroupId)>
	/*
	 * Queues
	 */

<automaton.portsPerGroupId:{id|<!
!>	final SingleReaderQueue queue<id> = new SingleReaderQueue(<length(automaton.portsPerGroupId.(id).sorted)>);<!
!>};separator="\n">
	
<endif>
	//
	// CONSTRUCTORS
	//
	
	public <protocolSimpleClassName>_Automaton<automaton.id>() {
		super(<length(automaton.publicPorts.sorted)><if(settings.PARTITION&&automaton.properties.MASTER)>, <length(automaton.privatePorts.sorted)><endif>);
		
<if(automaton.states.sorted)>
		/*
		 * Set states
		 */
		
<automaton.states.sorted:{st|<!
!>		this.state<st.id> = new <protocolSimpleClassName>_Automaton<automaton.id>_State<st.id>();<!
!>};separator="\n">
		
<endif>
		/*
		 * Return
		 */
		
		return;
	}
	
	//
	// METHODS
	//
	
	public void initialize(<protocolSimpleClassName> protocol) {
		
<if(automaton.states.sorted)>
		/*
		 * Initialize states
		 */
		
<automaton.states.sorted:{st|<!
!>		this.state<st.id>.initialize(protocol);<!
!>};separator="\n">
		
<endif>
		/*
		 * Reach initial state
		 */
		
		this.state<automaton.initialState.id>.reach();
		
		/*
		 * Return
		 */
		
		return;
	}
<if(settings.PARTITION&&automaton.properties.SLAVE)>
	
<automaton.states.sorted:{st|<!
!>	public boolean isCurrentState<st.id>() {
		return current.state == state<st.id>;
	\}<!
!>};separator="\n\n">
	
	@Override
	public void reachSuccessor() {
		current.state.reachSuccessor();
	}
<endif>
}
>>

stateClass(settings,protocolSimpleClassName,automaton,state) ::= <<
class <protocolSimpleClassName>_Automaton<automaton.id>_State<state.id> extends State {
	
	//
	// FIELDS
	//

<if(rest(automaton.states.sorted)||(settings.PARTITION&&automaton.properties.SLAVE))>
	/*
	 * Current state
	 */
	
	Current current;
	
<endif>
<if(!rest(state.transitions.sorted))>
	/*
	 * Successor
	 */
	
	State successor;
	
<endif>
<if(state.publicPorts.sorted)>
	/*
	 * Public ports
	 */
	
<state.publicPorts.sorted:{p|<!
!>	PublicPort <p.variableName>;<!
!>};separator="\n">
	
<endif>
<if(state.privatePorts.sorted)>
	/*
	 * Private ports
	 */
	
<state.privatePorts.sorted:{p|<!
!>	PrivatePort <p.variableName>;<!
!>};separator="\n">
	
<endif>
<if(!settings.PARTITION||automaton.properties.MASTER)>
	<if(state.transitions.sorted)>
	/*
	 * Transitions
	 */
		
<state.transitions.nonsilentSubset.sorted:{tr|<!
!>	final <protocolSimpleClassName>_Automaton<automaton.id>_Transition<tr.id> transition<tr.id>;<!
!>};separator="\n">
	
	<endif>
	<if(state.transitionsPerPort)>
	/*
	 * Observable transitions per port
	 */
	
<state.transitionsPerPort:{p|<!
!>	<if(rest(state.transitionsPerPort.(p).sorted))>final Transition[] oTransitionsInvolving<p.variableName>;<\n><endif><!
!>};separator="">
	
	/*
	 * Fairness indices for observable transitions
	 */
	
<state.transitionsPerPort:{p|<!
!>	<if(rest(state.transitionsPerPort.(p).sorted))>int oTransitionsInvolving<p.variableName>Index = 0;<\n><endif><!
!>};separator="">
	<endif>
	<if(state.transitions.silentSubset.sorted)>
	/*
	 * Unobservable transitions
	 */
	
	Transition[] uTransitions;
	
	/*
	 * Fairness index for unobservable transitions
	 */
	
	int uTransitionsIndex = 0;
	
	<endif>
<endif>
<if(!settings.PARTITION||automaton.properties.MASTER)>
	//
	// CONSTRUCTORS
	//
	
	public <protocolSimpleClassName>_Automaton<automaton.id>_State<state.id>() {
		
	<if(state.transitions.sorted)>
		/*
		 * Set transitions
		 */
		
<state.transitions.sorted:{tr|<!
!>		this.transition<tr.id> = new <protocolSimpleClassName>_Automaton<automaton.id>_Transition<tr.id>();<!
!>};separator="\n">
		
	<endif>
	<if(state.transitions.nonsilentSubset.sorted)>
		/*
		 * Set observable transitions per port
		 */
		
<state.transitionsPerPort:{p|<!
!>		<if(rest(state.transitionsPerPort.(p).sorted))>
		this.oTransitionsInvolving<p.variableName> = new Transition[] {
<state.transitionsPerPort.(p).sorted:{tr|<!
!>			this.transition<tr.id><!
!>};separator=",\n">
		\};<\n><\n>
		<endif><!
!>};separator="">
	<endif>
	<if(state.transitions.silentSubset.sorted)>
		/*
		 * Set unobservable transitions
		 */
		
		this.uTransitions = new Transition[] {
<state.transitions.silentSubset.sorted:{tr|<!
!>			this.transition<tr.id><!
!>};separator=",\n">
		};
		
	<endif>
		/*
		 * Return
		 */
		
		return;
	}
<endif>
	
	//
	// METHODS
	//
	
	public void initialize(<protocolSimpleClassName> protocol) {
		
<if(rest(automaton.states.sorted)||(settings.PARTITION&&automaton.properties.SLAVE))>
		/*
		 * Set current state
		 */
		
		this.current = protocol.automaton<automaton.id>.current;
		
<endif>
<if(!rest(state.transitions.sorted))>
		/*
		 * Set successor
		 */

		this.successor = protocol.automaton<automaton.id>.state<first(state.transitions.sorted).target.id>;
<endif>
<if(state.ports.sorted)>
		/*
		 * Set ports 
		 */
		
<state.ports.sorted:{p|<!
!>		this.<p.variableName> = protocol.<p.variableName>;<!
!>};separator="\n">
		
<endif>
<if((!settings.PARTITION||automaton.properties.MASTER)&&state.transitions.nonsilentSubset.sorted)>
		/*
		 * Initialize transitions
		 */
		
<state.transitions.sorted:{tr|<!
!>		this.transition<tr.id>.initialize(protocol);<!
!>};separator="\n">
		
<endif>
		/*
		 * Return
		 */
		
		return;
	}
	
	@Override
	public void reach() {
		
<if(rest(automaton.states.sorted)||(settings.PARTITION&&automaton.properties.SLAVE))>
		/*
		 * Update current state
		 */
		
		current.state = this;
		
<endif>
<if(state.publicPorts.sorted)>
		/*
		 * Unblock public ports
		 */
		
<state.publicPorts.sorted:{p|<!
!>		<p.variableName>.semaphore.release();<!
!>};separator="\n">
		
<endif>
<if(state.privatePorts.sorted)>
		/*
		 * Notify masters of private ports
		 */
		
<state.privatePorts.sorted:{p|<!
!>		<p.variableName>.kickMaster();<!
!>};separator="\n">
		
<endif>
<if((!settings.PARTITION||automaton.properties.MASTER)&&state.transitions.silentSubset.sorted&&!state.transitions.nonsilentSubset.sorted)>
		/*
		 * Fire an unobservable transition
		 */
		
		uTransitions[uTransitionsIndex].fire();
		uTransitionsIndex = (uTransitionsIndex + 1) % <length(state.transitions.silentSubset.sorted)>;
		
<endif>
		/*
		 * Return
		 */
		
		return;
	}
<if(!rest(state.transitions.sorted))>
	
	@Override
	public void reachSuccessor() {
		successor.reach();
	}
<endif>
}
>>

transitionClass(settings,protocolSimpleClassName,automaton,transition) ::= <<
class <protocolSimpleClassName>_Automaton<automaton.id>_Transition<transition.id> extends Transition {
	
	//
	// FIELDS
	//
	
	/*
	 * Context
	 */
	
	Context context;
	
<if(transition.publicPorts.sorted)>
	/*
	 * Public ports
	 */
	
<transition.publicPorts.sorted:{p|<!
!>	PublicPort <p.variableName>;<!
!>};separator="\n">
	
<endif>
<if(transition.privatePorts.sorted)>
	/*
	 * Private ports
	 */
	
<transition.privatePorts.sorted:{p|<!
!>	PrivatePort <p.variableName>;<!
!>};separator="\n">
	
<endif>
<if(settings.COUNT_PORTS
	&&!rest(automaton.transitions.sorted))>
	/*
	 * Put/get counter
	 */
	
	AtomicInteger counter;
	
<endif>
<if(transition.publicGroupIds)>
	/*
	 * Queues and their public ports
	 */
		
<transition.groupIds:{id|<!
!>	SingleReaderQueue queue<id>;
	PublicPort queue<id>Port;<!
!>};separator="\n\n">

<endif>
<if(transition.privateGroupIds)>
	/*
	 * Queues and their private ports
	 */
		
<transition.groupIds:{id|<!
!>	SingleReaderQueue queue<id>;
	PrivatePort queue<id>Port;<!
!>};separator="\n\n">

<endif>
<if(!settings.IGNORE_DATA)>
	/*
	 * Data constraint
	 */
	
	DataConstraint dataConstraint;
	
<endif>
	/*
	 * Target
	 */
	
	<protocolSimpleClassName>_Automaton<automaton.id>_State<transition.target.id> target;
	
<if(settings.PARTITION
	&&automaton.properties.MASTER
	&&(transition.neighbors.sorted||transition.privateGroupIds)
	&&transition.properties.PREDICTABLE_NEIGHBORS)>
	/*
	 * Predictable slaves
	 */
	<if(transition.neighbors.sorted)>
	
<transition.neighbors.sorted:{aut|<!
!>	<protocolSimpleClassName>_Automaton<aut.id> automaton<aut.id>;<!
!>};separator="\n">
	<endif>
	<if(transition.groupIds)>
	
<transition.privateGroupIds:{id|<!
!>	Automaton queue<id>Automaton;
	Runnable queue<id>Continuation;<!
!>};separator="\n">
	<endif>
	
<endif>
	//
	// METHODS - PUBLIC
	//
	
	@Override
	public boolean fire() {
		
<if(transition.groupIds)>
		/*
		 * Dequeue
		 */
		
<transition.groupIds:{id|<!
!>		if (!queue<id>.canPoll())
			return false;<!
!>};separator="\n">
	<if(transition.publicGroupIds)>
		
<transition.publicGroupIds:{id|<!
!>		SingleReaderQueueItem queue<id>Item = queue<id>.peek();
		queue<id>Port = (PublicPort) queue<id>Item.port;<!
!>};separator="\n\n">
	<endif>
	<if(transition.privateGroupIds)>
		
<transition.privateGroupIds:{id|<!
!>		SingleReaderQueueItem queue<id>Item = queue<id>.peek();
		queue<id>Port = (PrivatePort) queue<id>Item.port;
		queue<id>Automaton = queue<id>Item.automaton;
		queue<id>Continuation = queue<id>Item.continuation;<!
!>};separator="\n\n">
	<endif>
		
<endif>
<if(settings.PARTITION
	&&automaton.properties.MASTER
	&&(transition.neighbors.sorted||transition.privateGroupIds)
	&&transition.properties.PREDICTABLE_NEIGHBORS)>
		/*
		 * Lock slaves
		 */
	<if(transition.neighbors.sorted)>
		
<transition.neighbors.sorted:{aut|<!
!>		//automaton<aut.id>.semaphore.acquireUninterruptibly();<!
!>};separator="\n">
	<endif>
	<if(transition.privateGroupIds)>
		
<transition.privateGroupIds:{id|<!
!>		//queue<id>Automaton.semaphore.acquireUninterruptibly();<!
!>};separator="\n\n">
	<endif>
		
<endif>
		/*
		 * Check synchronization/data constraint
		 */
		
		boolean canFire = checkSynchronizationSet() && checkDataConstraint();
		
		/*
		 * Finalize transition
		 */
		
		if (canFire) {
		
<if(transition.masks)>
			/*
			 * Update context
			 */
		
<transition.masks:{m|<!
!>			context.remove(<m.wordIndex>, <m.mask>);<!
!>};separator="\n">
		
<endif>
<if(settings.COUNT_PORTS
	&&!rest(automaton.transitions.sorted))>
			/*
			 * Update put/get counter
			 */
			
			counter.set(0);
			
<endif>
<if(transition.groupIds)>
			/*
			 * Dequeue
			 */
			
<transition.groupIds:{id|<!
!>			queue<id>.poll();<!
!>};separator="\n">
			
<endif>
<if(transition.publicPorts.sorted
	||transition.publicGroupIds)>
			/*
			 * Unblock ports
			 */
		 
<transition.publicPorts.sorted:{p|<!
!>			<p.variableName>.status = IO.COMPLETED;
			<p.variableName>.semaphore.release();<!
!>};separator="\n">
	<if(transition.publicGroupIds)>
			
<transition.publicGroupIds:{id|<!
!>			queue<id>Port.status = IO.COMPLETED;
			queue<id>Port.semaphore.release();<!
!>};separator="\n">
	<endif>
			
<endif>
			/*
			 * Update current state
			 */
		
			target.reach();
<if(settings.PARTITION
	&&automaton.properties.MASTER
	&&(transition.neighbors.sorted||transition.privateGroupIds)
	&&transition.properties.PREDICTABLE_NEIGHBORS)>
			
			/*
			 * Update current states in predictable slaves
			 */
	<if(transition.neighbors.sorted)>
			
<transition.neighbors.sorted:{aut|<!
!>			automaton<aut.id>.state<transition.predictionPerNeighbor.(aut).target.id>.reach();<!
!>};separator="\n">
	<endif>
	<if(transition.privateGroupIds)>
<transition.privateGroupIds:{id|<!
!>			queue<id>Continuation.run();<!
!>};separator="\n">
	<endif>
<endif>
		}
		
<if(settings.PARTITION
	&&automaton.properties.MASTER
	&&(transition.neighbors.sorted||transition.privateGroupIds)
	&&transition.properties.PREDICTABLE_NEIGHBORS)>
		/*
		 * Unlock slaves
		 */
	<if(transition.neighbors.sorted)>
		
<transition.neighbors.sorted:{aut|<!
!>		//automaton<aut.id>.semaphore.release();<!
!>};separator="\n">
	<endif>
	<if(transition.privateGroupIds)>
<transition.privateGroupIds:{id|<!
!>		//queue<id>Automaton.semaphore.release();<!
!>};separator="\n">
	<endif>
		
<endif>
		/*
		 * Return
		 */
		
		return canFire;
	}
	
	public void initialize(<protocolSimpleClassName> protocol) {
		
		/*
		 * Set context
		 */
		
		this.context = protocol.automaton<automaton.id>.context;
		
<if(transition.ports.sorted)>
		/*
		 * Set ports 
		 */
		
<transition.ports.sorted:{p|<!
!>		this.<p.variableName> = protocol.<p.variableName>;<!
!>};separator="\n">
		
<endif>
<if(settings.COUNT_PORTS
	&&!rest(automaton.transitions.sorted))>
		/*
		 * Set put/get counter
		 */
		
		this.counter = protocol.automaton<automaton.id>.counter;
		
<endif>
<if(transition.groupIds)>
		/*
		 * Queues
		 */
		
<transition.groupIds:{id|<!
!>		this.queue<id> = protocol.automaton<automaton.id>.queue<id>;<!
!>};separator="\n">
		
<endif>
<if(!settings.IGNORE_DATA)>
		/*
		 * Set data constraint and target
		 */
		
		this.dataConstraint = new DataConstraint(protocol);
		
<endif>
		/*
		 * Set target
		 */
		
		this.target = protocol.automaton<automaton.id>.state<transition.target.id>;
		
<if(settings.PARTITION
	&&automaton.properties.MASTER
	&&transition.neighbors.sorted
	&&transition.properties.PREDICTABLE_NEIGHBORS)>
		/*
		 * Set predictable slaves
		 */
		
<transition.neighbors.sorted:{aut|<!
!>		this.automaton<aut.id> = protocol.automaton<aut.id>;<!
!>};separator="\n">
		
<endif>
		/*
		 * Return
		 */
		 
		 return;
	}
	
	//
	// METHODS - PROTECTED
	//

<if(!settings.IGNORE_DATA)>
	@Override
	protected boolean checkDataConstraint() {
		return dataConstraint.solve();
	}
	
<endif>
	protected boolean checkSynchronizationSet() {
		return true<!
!><transition.masks:{m|
			&& context.contains(<m.wordIndex>, <m.mask>)<!
!>};separator="">
<transition.neighbors.sorted:{aut|<!
!>			&& automaton<aut.id>.isCurrentState<transition.predictionPerNeighbor.(aut).source.id>()<!
!>};separator="">;
	}
<if(!settings.IGNORE_DATA)>
	
	//
	// CLASSES
	//
	
	<if(settings.PARTITION&&transition.properties.PREDICTABLE_NEIGHBORS)>
	<cspClass(settings,protocolSimpleClassName,automaton,transition,transition.constraintPlus)>
	<else>
	<cspClass(settings,protocolSimpleClassName,automaton,transition,transition.constraint)>
	<endif>
<endif>
}
>>

cspClass(settings,protocolSimpleClassName,automaton,transition,constraint) ::= <<
class DataConstraint {

	//
	// FIELDS
	//
	
<if(constraint.publicPorts.sorted)>
	/*
	 * Public port variables
	 */
	
<constraint.publicPorts.sorted:{p|<!
!>	final private CspPortVariable <p.variableName>;<!
!>};separator="\n">
	
<endif>
<if(constraint.privatePorts.sorted)>
	/*
	 * Private port variables
	 */
	
<constraint.privatePorts.sorted:{p|<!
!>	final private CspPortVariable <p.variableName>;<!
!>};separator="\n">
	
<endif>
<if(constraint.preMemoryCells.sorted)>
	/*
	 * Pre variables
	 */
	
<constraint.preMemoryCells.sorted:{m|<!
!>	final private CspPreVariable <m.variableName>$pre;<!
!>};separator="\n">
	
<endif>
<if(constraint.postMemoryCells.sorted)>
	/*
	 * Post variables
	 */

<constraint.postMemoryCells.sorted:{m|<!
!>	final private CspPostVariable <m.variableName>$post;<!
!>};separator="\n">
	
<endif>
<if([constraint.quantifiedPorts.sorted,constraint.quantifiedVariableIds])>
	/*
	 * Quantified variables
	 */

<constraint.quantifiedPorts.sorted:{p|<!
!>	final private CspVariable <p.variableName>;<!
!>};separator="\n">	
<constraint.quantifiedVariableIds:{j|<!
!>	final private CspVariable $<j>;<!
!>};separator="\n">
	
<endif>
<if(!constraint.commandification)>
	/*
	 * Csp
	 */
	
	final Csp csp = new Csp();
	
<endif>
	//
	// CONSTRUCTORS
	//
	
	public DataConstraint(<protocolSimpleClassName> protocol) {
		
<if([constraint.publicPorts.sorted,constraint.privatePorts.sorted,constraint.preMemoryCells.sorted,constraint.postMemoryCells.sorted,constraint.quantifiedPorts.sorted,constraint.quantifiedVariableIds])>
		/*
		 * Set variables
		 */
		
<constraint.publicPorts.sorted:{p|<!
!>		this.<p.variableName> = protocol.variablePool.newOrGetPortVariable(protocol.<p.variableName>);<!
!>};separator="\n">
<constraint.privatePorts.sorted:{p|<!
!>		this.<p.variableName> = protocol.variablePool.newOrGetPortVariable(protocol.<p.variableName>);<!
!>};separator="\n">
<constraint.preMemoryCells.sorted:{m|<!
!>		this.<m.variableName>$pre = protocol.variablePool.newOrGetPreVariable(protocol.<m.variableName>);<!
!>};separator="\n">
<constraint.postMemoryCells.sorted:{m|<!
!>		this.<m.variableName>$post = protocol.variablePool.newOrGetPostVariable(protocol.<m.variableName>);<!
!>};separator="\n">
<constraint.quantifiedPorts.sorted:{p|<!
!>		this.<p.variableName> = protocol.variablePool.newOrGetQuantifiedVariable("<p.variableName>");<!
!>};separator="\n">
<constraint.quantifiedVariableIds:{j|<!
!>		this.$<j> = protocol.variablePool.newOrGetQuantifiedVariable("$<j>");<!
!>};separator="\n">
		
<endif>
<if(!constraint.commandification)>
		/*
		 * Initialize csp
		 */
		
		csp.setVariables(
<constraint.ports.sorted:{p|<!
!>				<p.variableName><!
!>};separator=",\n"><!
!><if(constraint.ports.sorted&&constraint.postMemoryCells.sorted)>,<\n><endif><!
!><constraint.postMemoryCells.sorted:{m|<!
!>				<m.variableName>$post<!
!>};separator=",\n"><!
!><if([constraint.ports.sorted,constraint.postMemoryCells.sorted]&&constraint.preMemoryCells.sorted)>,<\n><endif><!
!><constraint.preMemoryCells.sorted:{m|<!
!>				<m.variableName>$pre<!
!>};separator=",\n"><!
!><if([constraint.ports.sorted,constraint.postMemoryCells.sorted,constraint.preMemoryCells.sorted]&&constraint.quantifiedVariableIds)>,<\n><endif><!
!><constraint.quantifiedVariableIds:{j|<!
!>				$<j><!
!>};separator=",\n">
		);
		
		csp.setLiterals(
<constraint.literals.sorted:{l|<!
!>			new Literal<l.id>(
<l.ports.sorted:{p|<!
!>				<p.variableName><!
!>};separator=",\n"><!
!><if(l.ports.sorted&&l.postMemoryCells.sorted)>,<\n><endif><!
!><l.postMemoryCells.sorted:{m|<!
!>				<m.variableName>$post<!
!>};separator=",\n"><!
!><if([l.ports.sorted,l.postMemoryCells.sorted]&&l.preMemoryCells.sorted)>,<\n><endif><!
!><l.preMemoryCells.sorted:{m|<!
!>				<m.variableName>$pre<!
!>};separator=",\n"><!
!><if([l.ports.sorted,l.postMemoryCells.sorted,l.preMemoryCells.sorted]&&l.quantifiedVariableIds)>,<\n><endif><!
!><l.quantifiedVariableIds:{j|<!
!>				$<j><!
!>};separator=",\n">
			)<!
!>};separator=",\n">
		);
		
<endif>
		/*
		 * Return
		 */
		
		return;
	}
<if(constraint.commandification)>
	
	public boolean solve() {
<if(transition.representatives)>
<transition.representatives:{id|<!
!>		<transition.representatives.(id).variableName>.setPort(queue<id>Port);<!
!>};separator="\n">
<endif>
<transition.privatePorts.sorted:{p|<!
!>		<p.variableName>.resetPortBuffer();<!
!>};separator="\n">
<constraint.commandification:{c|<!
!><if(c.properties.ASSIGNMENT)><!
!>		<c.variable.variableName>.setValue(<c.definition.expression>);<!
!><elseif(c.properties.EXPORT)><!
!>		<c.variable.variableName>.exportValue();<!
!><elseif(c.properties.GUARDED_FAILURE)><!
!>		if (!<c.guard.expression>)
			return false;<!
!><elseif(c.properties.IMPORT)><!
!>		<c.variable.variableName>.importValue();<!
!><endif><!
!>};separator="\n">
		return true;
	}
<else>

	public boolean solve() {
<if(transition.representatives)>
<transition.representatives:{id|<!
!>		<transition.representatives.(id).variableName>.setPort(queue<id>Port);<!
!>};separator="\n">
<endif>
<transition.privatePorts.sorted:{p|<!
!>		<p.variableName>.resetPortBuffer();<!
!>};separator="\n">
		return Csp.solve(csp);
	}
<endif>
<if(!constraint.commandification&&constraint.literals.sorted)>
	
	//
	// CLASSES
	//
	
	<constraint.literals.sorted:{l|<!
	!><literalClass(automaton,protocolSimpleClassName,l)><!
	!>};separator="\n\n">
<endif>
}
>>

literalClass(automaton,protocolSimpleClassName,literal) ::= <<
class Literal<literal.id> extends <if(literal.properties.EQUALITY)>CspEquality<else>CspLiteral<endif> {
	
<literal.ports.sorted:{p|<!
!>	final CspVariable <p.variableName>;<!
!>};separator="\n">
<literal.postMemoryCells.sorted:{m|<!
!>	final CspVariable <m.variableName>$post;<!
!>};separator="\n">
<literal.preMemoryCells.sorted:{m|<!
!>	final CspVariable <m.variableName>$pre;<!
!>};separator="\n">
<literal.quantifiedVariableIds:{j|<!
!>	final CspVariable $<j>;<!
!>};separator="\n">
	
	Literal<literal.id>(
<literal.ports.sorted:{p|<!
!>		CspVariable <p.variableName><!
!>};separator=",\n"><!
!><if(literal.ports.sorted&&literal.postMemoryCells.sorted)>,<\n><endif><!
!><literal.postMemoryCells.sorted:{m|<!
!>		CspVariable <m.variableName>$post<!
!>};separator=",\n"><!
!><if([literal.ports.sorted,literal.postMemoryCells.sorted]&&literal.preMemoryCells.sorted)>,<\n><endif><!
!><literal.preMemoryCells.sorted:{m|<!
!>		CspVariable <m.variableName>$pre<!
!>};separator=",\n"><!
!><if([literal.ports.sorted,literal.postMemoryCells.sorted,literal.preMemoryCells.sorted]&&literal.quantifiedVariableIds)>,<\n><endif><!
!><literal.quantifiedVariableIds:{j|<!
!>		CspVariable $<j><!
!>};separator=",\n">
	) {
		super(
<if(literal.properties.EQUALITY)>
			<if(literal.argument1.properties.VARIABLE)><literal.argument1.variableName><else>null<endif>,
			<if(literal.argument2.properties.VARIABLE)><literal.argument2.variableName><else>null<endif>,
<endif>
<literal.ports.sorted:{p|<!
!>			<p.variableName><!
!>};separator=",\n"><!
!><if(literal.ports.sorted&&literal.postMemoryCells.sorted)>,<\n><endif><!
!><literal.postMemoryCells.sorted:{m|<!
!>			<m.variableName>$post<!
!>};separator=",\n"><!
!><if([literal.ports.sorted,literal.postMemoryCells.sorted]&&literal.preMemoryCells.sorted)>,<\n><endif><!
!><literal.preMemoryCells.sorted:{m|<!
!>			<m.variableName>$pre<!
!>};separator=",\n"><!
!><if([literal.ports.sorted,literal.postMemoryCells.sorted,literal.preMemoryCells.sorted]&&literal.quantifiedVariableIds)>,<\n><endif><!
!><literal.quantifiedVariableIds:{j|<!
!>			$<j><!
!>};separator=",\n">
		);
		
<literal.ports.sorted:{p|<!
!>		this.<p.variableName> = <p.variableName>;<!
!>};separator="\n">
<literal.postMemoryCells.sorted:{m|<!
!>		this.<m.variableName>$post = <m.variableName>$post;<!
!>};separator="\n">
<literal.preMemoryCells.sorted:{m|<!
!>		this.<m.variableName>$pre = <m.variableName>$pre;<!
!>};separator="\n">
<literal.quantifiedVariableIds:{j|<!
!>		this.$<j> = $<j>;<!
!>};separator="\n">
	}

<if(literal.properties.EQUALITY)>
	@Override
	protected Object lhs() {
		return <literal.argument1.expression>;
	}
	
	@Override
	protected Object rhs() {
		return <literal.argument2.expression>;
	}
<else>
	@Override
	protected boolean holds() {
		return <literal.expression>;
	}
<endif>
}
>>

handlerClass(settings,protocolSimpleClassName,automaton,port) ::= <<
class HandlerFor<port.variableName> extends Handler {
	
	//
	// FIELDS
	//
	
	/*
	 * Context and port
	 */
	
	final Context context;
	final PublicPort <port.variableName>;
	
<if(automaton.portToGroupId.(port))>
	/*
	 * Queues
	 */
	
	final SingleReaderQueue queue<automaton.portToGroupId.(port)>;
	
<endif>
<if(rest(automaton.states.sorted))>
	/*
	 * Current state
	 */
	
	final Current current;
	
<endif>
<if(settings.COUNT_PORTS
	&&!rest(automaton.transitions.sorted))>
	/*
	 * Put/get counter
	 */
	
	final AtomicInteger counter;
	
<endif>
<if(automaton.states.sorted)>
	/*
	 * States
	 */
	
<automaton.states.sorted:{st|<!
!><if(st.transitionsPerPort.(port).sorted)><!
!>	final <protocolSimpleClassName>_Automaton<automaton.id>_State<st.id> state<st.id>;<!
!><endif><!
!>};separator="\n">
	
<endif>
	//
	// CONSTRUCTORS
	//

	public HandlerFor<port.variableName>(<protocolSimpleClassName> protocol) {
		super(protocol.automaton<automaton.id>.semaphore);
		
		/*
		 * Set context and port
		 */
		
		this.context = protocol.automaton<automaton.id>.context;
		this.<port.variableName> = protocol.<port.variableName>;
		
<if(automaton.portToGroupId.(port))>
		/*
		 *
		 */
		 
		this.queue<automaton.portToGroupId.(port)> = protocol.automaton<automaton.id>.queue<automaton.portToGroupId.(port)>;
		
<endif>
<if(rest(automaton.states.sorted))>
		/*
		 * Set current state
		 */
		
		this.current = protocol.automaton<automaton.id>.current;
		
<endif>
<if(settings.COUNT_PORTS
	&&!rest(automaton.transitions.sorted))>
		/*
		 * Put/get counter
		 */
		
		this.counter = protocol.automaton<automaton.id>.counter;
		
<endif>
<if(automaton.states.sorted)>
		/*
		 * Set states
		 */
		
<automaton.states.sorted:{st|<!
!><if(st.transitionsPerPort.(port).sorted)><!
!>		this.state<st.id> = protocol.automaton<automaton.id>.state<st.id>;<!
!><endif><!
!>};separator="\n">
		
<endif>
		/*
		 * Return
		 */
		
		return;
	}
	
	//
	// METHODS
	//
	
	@Override
	public boolean call() {
		if (<port.variableName>.status == IO.COMPLETED)
			return true;
		
<if(rest(automaton.states.sorted))>
<automaton.states.sorted:{st|<!
	!><if(st.transitionsPerPort.(port).sorted)>
		/* 
		 * Fire a transition from state #<st.id> 
		 */
		
		<if(rest(st.transitionsPerPort.(port).sorted))>
		if (current.state == state<st.id> && fireTransitionFromState<st.id>())
			return true;
		<else>
		if (current.state == state<st.id> && state<st.id>.transition<first(st.transitionsPerPort.(port).sorted).id>.fire())
			return true;
		<endif>
	<else>
		/*
		 * Ignore state #<st.id> (which has no transitions involving port <port>)
		 */
	<endif><!
!>};separator="\n">
<else>
		if (fireTransitionFromState<first(automaton.states.sorted).id>())
			return true;
<endif>
		
		<port.variableName>.semaphore.drainPermits();
		return false;
	}
	
<if(settings.COUNT_PORTS
	&&!rest(automaton.transitions.sorted))>
	private volatile int x;
	
	@Override
	public boolean callSync() throws InterruptedException {
		if (x \< <length(first(automaton.transitions.sorted).ports.sorted)>)
			return false;
		else
			return super.callSync();
	}
	
<endif>
	@Override
	public boolean cancel() {
<if(automaton.portToGroupId.(port))>
		throw new UnsupportedOperationException();
<endif>
<if(automaton.maskPerPort.(port))>
		context.remove(<automaton.maskPerPort.(port).wordIndex>, <automaton.maskPerPort.(port).mask>);
		IO status = <port.variableName>.status;
		<port.variableName>.status = null;
		return status == IO.COMPLETED;
<endif>
	}
	
	@Override
	public void flag() {
<if(automaton.portToGroupId.(port))>
		queue<automaton.portToGroupId.(port)>.offer(new SingleReaderQueueItem(<port.variableName>, null, null));
<endif>
<if(automaton.maskPerPort.(port))>
		context.add(<automaton.maskPerPort.(port).wordIndex>, <automaton.maskPerPort.(port).mask>);
<endif>
<if(settings.COUNT_PORTS
	&&!rest(automaton.transitions.sorted))>
		x = counter.incrementAndGet();
<endif>
	}
	
<automaton.states.sorted:{st|<!
	!><if(!rest(automaton.states.sorted)||rest(st.transitionsPerPort.(port).sorted))><\n><\n>
	<fireTransitionFromStateMethod(port,st)><!
	!><endif><!
!>};separator="">
}
>>

fireTransitionFromStateMethod(port,state) ::= <<
private boolean fireTransitionFromState<state.id>() {
<if(rest(state.transitionsPerPort.(port).sorted))>
	for (int i = state<state.id>.oTransitionsInvolving<port.variableName>Index; i \< state<state.id>.oTransitionsInvolving<port.variableName>Index + <length(state.transitionsPerPort.(port).sorted)>; i++)
		if (state<state.id>.oTransitionsInvolving<port.variableName>[i % <length(state.transitionsPerPort.(port).sorted)>].fire()) {
			state<state.id>.oTransitionsInvolving<port.variableName>Index = (i + 1) % <length(state.transitionsPerPort.(port).sorted)>;
			return true;
		}
	
	return false;
<else>
	return state<state.id>.transition<first(state.transitionsPerPort.(port).sorted).id>.fire();
<endif>
}
>>

queueableHandlerClass(settings,protocolSimpleClassName,automaton,port) ::= <<
class HandlerFor<port.variableName> extends QueueableHandler {
	
	//
	// FIELDS
	//
	
<if(rest(automaton.states.sorted))>
	/*
	 * Current state
	 */
	
	final Current current;
	
<endif>
<if(automaton.states.sorted)>
	/*
	 * States
	 */
	
<automaton.states.sorted:{st|<!
!><if(st.transitionsPerPort.(port).sorted)><!
!>	final <protocolSimpleClassName>_Automaton<automaton.id>_State<st.id> state<st.id>;<!
!><endif><!
!>};separator="\n">
	
<endif>
<if(automaton.portToGroupId.(port))>
	/*
	 * Queue stuff
	 */
	
	final SingleReaderQueue queue<automaton.portToGroupId.(port)>;
	final SingleReaderQueueItem queue<automaton.portToGroupId.(port)>Item;
	final PortImpl <port.variableName>;
<automaton.neighborsPerInputPort.(port).sorted:{aut|<!
!><aut.memoryCells.sorted:{m|<!
!>	final MemoryCell <m.variableName>;<!
!>};separator="\n"><!
!>};separator="\n">
<automaton.neighborsPerOutputPort.(port).sorted:{aut|<!
!><aut.memoryCells.sorted:{m|<!
!>	final MemoryCell <m.variableName>;<!
!>};separator="\n"><!
!>};separator="\n">
<automaton.neighborsPerPort.(port).sorted:{aut|<!
!>	final Automaton automaton<aut.id>;<!
!>};separator="\n">
	
<endif>
	//
	// CONSTRUCTORS
	//

	HandlerFor<port.variableName>(<protocolSimpleClassName> protocol) {
		super(protocol.automaton<automaton.id>.semaphore, protocol.automaton<automaton.id>.qhq);
		
<if(rest(automaton.states.sorted))>
		/*
		 * Set current state
		 */
		
		this.current = protocol.automaton<automaton.id>.current;
		
<endif>
<if(automaton.states.sorted)>
		/*
		 * Set states
		 */
		
<automaton.states.sorted:{st|<!
!><if(st.transitionsPerPort.(port).sorted)><!
!>		this.state<st.id> = protocol.automaton<automaton.id>.state<st.id>;<!
!><endif><!
!>};separator="\n">

<endif>
<if(automaton.portToGroupId.(port))>
		/*
		 * Set queue stuff
		 */
		
		this.queue<automaton.portToGroupId.(port)> = protocol.automaton<automaton.id>.queue<automaton.portToGroupId.(port)>;
		this.<port.variableName> = protocol.<port.variableName>;
<automaton.neighborsPerInputPort.(port).sorted:{aut|<!
!><aut.memoryCells.sorted:{m|<!
!>		this.<m.variableName> = protocol.<m.variableName>;<!
!>};separator="\n"><!
!>};separator="\n">
<automaton.neighborsPerOutputPort.(port).sorted:{aut|<!
!><aut.memoryCells.sorted:{m|<!
!>		this.<m.variableName> = protocol.<m.variableName>;<!
!>};separator="\n"><!
!>};separator="\n">
<automaton.neighborsPerPort.(port).sorted:{aut|<!
!>		this.automaton<aut.id> = protocol.automaton<aut.id>;<!
!>};separator="\n">
		
		this.queue<automaton.portToGroupId.(port)>Item = new SingleReaderQueueItem(
			<port.variableName>, 
			automaton<first(automaton.neighborsPerPort.(port).sorted).id>, 
			new Runnable() {
				public void run() {
<automaton.neighborsPerOutputPort.(port).sorted:{aut|<!
!><aut.memoryCells.sorted:{m|<!
!>					<m.variableName>.content = <port.variableName>.buffer;<!
!>};separator="\n"><!
!>};separator="\n">
<automaton.neighborsPerPort.(port).sorted:{aut|<!
!>					automaton<aut.id>.reachSuccessor();<!
!>};separator="\n">
				}
			}
		);
		
<endif>
		/*
		 * Return
		 */
		
		return;
	}
	
	//
	// METHODS
	//
	
	@Override
	public boolean call() {
<if(rest(automaton.states.sorted))>
<automaton.states.sorted:{st|<!
	!><if(st.transitionsPerPort.(port).sorted)>
		/* 
		 * Fire a transition from state #<st.id> 
		 */
		
		if (current.state == state<st.id> && fireTransitionFromState<st.id>())
				return true;
	<else>
		/*
		 * Ignore state #<st.id> (which has no transitions involving port <port>)
		 */
	<endif><!
!>};separator="\n">
<else>
		if (fireTransitionFromState<first(automaton.states.sorted).id>())
			return true;
<endif>
		
		return false;
	}
	
	@Override
	public void flag() {
<if(automaton.portToGroupId.(port))>
<if(automaton.neighborsPerInputPort.(port))>
<automaton.neighborsPerInputPort.(port).sorted:{aut|<!
!><aut.memoryCells.sorted:{m|<!
!>		<port.variableName>.buffer = <m.variableName>.content;<!
!>};separator="\n"><!
!>};separator="\n">
<else>
		<port.variableName>.buffer = null;
<endif>
		queue<automaton.portToGroupId.(port)>.offer(queue<automaton.portToGroupId.(port)>Item);
<endif>
<if(automaton.maskPerPort.(port))>
		context.add(<automaton.maskPerPort.(port).wordIndex>, <automaton.maskPerPort.(port).mask>);
<endif>
	}
<automaton.states.sorted:{st|<!
	!><if(st.transitionsPerPort.(port).sorted)>
	<fireTransitionFromStateMethod(port,st)><!
	!><endif><!
!>};separator="\n\n">
}
>>
